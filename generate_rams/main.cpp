#include "../common/csv_parser.h"
#include "Type.h"
#include <iostream>
#include <sstream>

//address,size,type,name
const std::vector<std::string> wram_order = { "address", "size", "type", "name", };

unsigned hex_no_prefix_to_integer(const std::string &s){
	std::stringstream stream;
	stream << std::hex << s;
	unsigned ret;
	if (!(stream >> ret))
		throw std::runtime_error((std::string)"Can't convert \"" + s + "\" from hex to integer.");
	return ret;
}

unsigned decimal_to_integer(const std::string &s){
	std::stringstream stream;
	stream << s;
	unsigned ret;
	if (!(stream >> ret))
		throw std::runtime_error((std::string)"Can't convert \"" + s + "\" from decimal to integer.");
	return ret;
}

void generate_xram(const char *file_name, const char *class_name, unsigned base_address){
	std::string input = (std::string)"input/" + file_name + ".csv";
	std::string output1 = (std::string)"output/" + file_name + ".h";
	std::string output2 = (std::string)"output/" + file_name + ".inl";

	CsvParser csv(input.c_str());
	std::ofstream output_h(output1);
	std::ofstream output_cpp(output2);
	
	output_h << "//This file is autogenerated by generate_rams. Do not edit.\n\n";
	output_cpp << "//This file is autogenerated by generate_rams. Do not edit.\n\n";

	const auto rows = csv.row_count();
	bool first = true;
	for (size_t i = 0; i < rows; i++){
		auto row = csv.get_ordered_row(i, wram_order);
		try{
			if (row[1] == "marker" || !row[2].size())
				continue;
			auto address = hex_no_prefix_to_integer(row[0]);
			std::unique_ptr<Number> size(new CompoundNumber(row[1]));
			auto type = parse_string_to_Type(row[2]);
			auto name = row[3];

			type->class_name = class_name;

			output_h
				<< "//Address: " << row[0] << std::endl
				<< type->generate_declarations(name);
			if (first)
				first = false;
			else
				output_cpp << ",\n";
			output_cpp << type->generate_initializer(address, base_address, size, name);

		}catch (std::exception &e){
			std::stringstream stream;
			stream << "Error while processesing line " << i + 2 << " of " << input << ": " << e.what();
			throw std::runtime_error(stream.str());
		}
	}
}

int main(){
	//Assumption: The working directory is cppred/CodeGeneration
	try{
		generate_xram("wram", "WRam", 0xC000);
		generate_xram("hram", "HRam", 0xFF80);
	}catch (std::exception &e){
		std::cerr << e.what() << std::endl;
		return -1;
	}
	return 0;
}
